// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routerrpc/router.proto

package routerrpc // import "github.com/decred/dcrlnd/lnrpc/routerrpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import lnrpc "github.com/decred/dcrlnd/lnrpc"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PaymentState int32

const (
	// *
	// Payment is still in flight.
	PaymentState_IN_FLIGHT PaymentState = 0
	// *
	// Payment completed successfully.
	PaymentState_SUCCEEDED PaymentState = 1
	// *
	// There are more routes to try, but the payment timeout was exceeded.
	PaymentState_FAILED_TIMEOUT PaymentState = 2
	// *
	// All possible routes were tried and failed permanently. Or were no
	// routes to the destination at all.
	PaymentState_FAILED_NO_ROUTE PaymentState = 3
	// *
	// A non-recoverable error has occured.
	PaymentState_FAILED_ERROR PaymentState = 4
	// *
	// Payment details incorrect (unknown hash, invalid amt or
	// invalid final cltv delta)
	PaymentState_FAILED_INCORRECT_PAYMENT_DETAILS PaymentState = 5
)

var PaymentState_name = map[int32]string{
	0: "IN_FLIGHT",
	1: "SUCCEEDED",
	2: "FAILED_TIMEOUT",
	3: "FAILED_NO_ROUTE",
	4: "FAILED_ERROR",
	5: "FAILED_INCORRECT_PAYMENT_DETAILS",
}
var PaymentState_value = map[string]int32{
	"IN_FLIGHT":                        0,
	"SUCCEEDED":                        1,
	"FAILED_TIMEOUT":                   2,
	"FAILED_NO_ROUTE":                  3,
	"FAILED_ERROR":                     4,
	"FAILED_INCORRECT_PAYMENT_DETAILS": 5,
}

func (x PaymentState) String() string {
	return proto.EnumName(PaymentState_name, int32(x))
}
func (PaymentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{0}
}

type Failure_FailureCode int32

const (
	// *
	// The numbers assigned in this enumeration match the failure codes as
	// defined in BOLT #4. Because protobuf 3 requires enums to start with 0,
	// a RESERVED value is added.
	Failure_RESERVED                         Failure_FailureCode = 0
	Failure_UNKNOWN_PAYMENT_HASH             Failure_FailureCode = 1
	Failure_INCORRECT_PAYMENT_AMOUNT         Failure_FailureCode = 2
	Failure_FINAL_INCORRECT_CLTV_EXPIRY      Failure_FailureCode = 3
	Failure_FINAL_INCORRECT_HTLC_AMOUNT      Failure_FailureCode = 4
	Failure_FINAL_EXPIRY_TOO_SOON            Failure_FailureCode = 5
	Failure_INVALID_REALM                    Failure_FailureCode = 6
	Failure_EXPIRY_TOO_SOON                  Failure_FailureCode = 7
	Failure_INVALID_ONION_VERSION            Failure_FailureCode = 8
	Failure_INVALID_ONION_HMAC               Failure_FailureCode = 9
	Failure_INVALID_ONION_KEY                Failure_FailureCode = 10
	Failure_AMOUNT_BELOW_MINIMUM             Failure_FailureCode = 11
	Failure_FEE_INSUFFICIENT                 Failure_FailureCode = 12
	Failure_INCORRECT_CLTV_EXPIRY            Failure_FailureCode = 13
	Failure_CHANNEL_DISABLED                 Failure_FailureCode = 14
	Failure_TEMPORARY_CHANNEL_FAILURE        Failure_FailureCode = 15
	Failure_REQUIRED_NODE_FEATURE_MISSING    Failure_FailureCode = 16
	Failure_REQUIRED_CHANNEL_FEATURE_MISSING Failure_FailureCode = 17
	Failure_UNKNOWN_NEXT_PEER                Failure_FailureCode = 18
	Failure_TEMPORARY_NODE_FAILURE           Failure_FailureCode = 19
	Failure_PERMANENT_NODE_FAILURE           Failure_FailureCode = 20
	Failure_PERMANENT_CHANNEL_FAILURE        Failure_FailureCode = 21
	// *
	// The error source is known, but the failure itself couldn't be decoded.
	Failure_UNKNOWN_FAILURE Failure_FailureCode = 998
	// *
	// An unreadable failure result is returned if the received failure message
	// cannot be decrypted. In that case the error source is unknown.
	Failure_UNREADABLE_FAILURE Failure_FailureCode = 999
)

var Failure_FailureCode_name = map[int32]string{
	0:   "RESERVED",
	1:   "UNKNOWN_PAYMENT_HASH",
	2:   "INCORRECT_PAYMENT_AMOUNT",
	3:   "FINAL_INCORRECT_CLTV_EXPIRY",
	4:   "FINAL_INCORRECT_HTLC_AMOUNT",
	5:   "FINAL_EXPIRY_TOO_SOON",
	6:   "INVALID_REALM",
	7:   "EXPIRY_TOO_SOON",
	8:   "INVALID_ONION_VERSION",
	9:   "INVALID_ONION_HMAC",
	10:  "INVALID_ONION_KEY",
	11:  "AMOUNT_BELOW_MINIMUM",
	12:  "FEE_INSUFFICIENT",
	13:  "INCORRECT_CLTV_EXPIRY",
	14:  "CHANNEL_DISABLED",
	15:  "TEMPORARY_CHANNEL_FAILURE",
	16:  "REQUIRED_NODE_FEATURE_MISSING",
	17:  "REQUIRED_CHANNEL_FEATURE_MISSING",
	18:  "UNKNOWN_NEXT_PEER",
	19:  "TEMPORARY_NODE_FAILURE",
	20:  "PERMANENT_NODE_FAILURE",
	21:  "PERMANENT_CHANNEL_FAILURE",
	998: "UNKNOWN_FAILURE",
	999: "UNREADABLE_FAILURE",
}
var Failure_FailureCode_value = map[string]int32{
	"RESERVED":                         0,
	"UNKNOWN_PAYMENT_HASH":             1,
	"INCORRECT_PAYMENT_AMOUNT":         2,
	"FINAL_INCORRECT_CLTV_EXPIRY":      3,
	"FINAL_INCORRECT_HTLC_AMOUNT":      4,
	"FINAL_EXPIRY_TOO_SOON":            5,
	"INVALID_REALM":                    6,
	"EXPIRY_TOO_SOON":                  7,
	"INVALID_ONION_VERSION":            8,
	"INVALID_ONION_HMAC":               9,
	"INVALID_ONION_KEY":                10,
	"AMOUNT_BELOW_MINIMUM":             11,
	"FEE_INSUFFICIENT":                 12,
	"INCORRECT_CLTV_EXPIRY":            13,
	"CHANNEL_DISABLED":                 14,
	"TEMPORARY_CHANNEL_FAILURE":        15,
	"REQUIRED_NODE_FEATURE_MISSING":    16,
	"REQUIRED_CHANNEL_FEATURE_MISSING": 17,
	"UNKNOWN_NEXT_PEER":                18,
	"TEMPORARY_NODE_FAILURE":           19,
	"PERMANENT_NODE_FAILURE":           20,
	"PERMANENT_CHANNEL_FAILURE":        21,
	"UNKNOWN_FAILURE":                  998,
	"UNREADABLE_FAILURE":               999,
}

func (x Failure_FailureCode) String() string {
	return proto.EnumName(Failure_FailureCode_name, int32(x))
}
func (Failure_FailureCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{7, 0}
}

type SendPaymentRequest struct {
	// / The identity pubkey of the payment recipient
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	// / Number of amounts to send.
	Amt int64 `protobuf:"varint,2,opt,name=amt,proto3" json:"amt,omitempty"`
	// / The hash to use within the payment's HTLC
	PaymentHash []byte `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	// *
	// The CLTV delta from the current height that should be used to set the
	// timelock for the final hop.
	FinalCltvDelta int32 `protobuf:"varint,4,opt,name=final_cltv_delta,json=finalCltvDelta,proto3" json:"final_cltv_delta,omitempty"`
	// *
	// A bare-bones invoice for a payment within the Lightning Network.  With the
	// details of the invoice, the sender has all the data necessary to send a
	// payment to the recipient. The amount in the payment request may be zero. In
	// that case it is required to set the amt field as well. If no payment request
	// is specified, the following fields are required: dest, amt and payment_hash.
	PaymentRequest string `protobuf:"bytes,5,opt,name=payment_request,json=paymentRequest,proto3" json:"payment_request,omitempty"`
	// *
	// An upper limit on the amount of time we should spend when attempting to
	// fulfill the payment. This is expressed in seconds. If we cannot make a
	// successful payment within this time frame, an error will be returned.
	// This field must be non-zero.
	TimeoutSeconds int32 `protobuf:"varint,6,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// *
	// The maximum number of atoms that will be paid as a fee of the payment.
	// If this field is left to the default value of 0, only zero-fee routes will
	// be considered. This usually means single hop routes connecting directly to
	// the destination. To send the payment without a fee limit, use max int here.
	FeeLimitAtoms int64 `protobuf:"varint,7,opt,name=fee_limit_atoms,json=feeLimitAtoms,proto3" json:"fee_limit_atoms,omitempty"`
	// *
	// The channel id of the channel that must be taken to the first hop. If zero,
	// any channel may be used.
	OutgoingChanId uint64 `protobuf:"varint,8,opt,name=outgoing_chan_id,json=outgoingChanId,proto3" json:"outgoing_chan_id,omitempty"`
	// *
	// An optional maximum total time lock for the route. If zero, there is no
	// maximum enforced.
	CltvLimit int32 `protobuf:"varint,9,opt,name=cltv_limit,json=cltvLimit,proto3" json:"cltv_limit,omitempty"`
	// *
	// Optional route hints to reach the destination through private channels.
	RouteHints           []*lnrpc.RouteHint `protobuf:"bytes,10,rep,name=route_hints,proto3" json:"route_hints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SendPaymentRequest) Reset()         { *m = SendPaymentRequest{} }
func (m *SendPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*SendPaymentRequest) ProtoMessage()    {}
func (*SendPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{0}
}
func (m *SendPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendPaymentRequest.Unmarshal(m, b)
}
func (m *SendPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendPaymentRequest.Marshal(b, m, deterministic)
}
func (dst *SendPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendPaymentRequest.Merge(dst, src)
}
func (m *SendPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_SendPaymentRequest.Size(m)
}
func (m *SendPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendPaymentRequest proto.InternalMessageInfo

func (m *SendPaymentRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *SendPaymentRequest) GetAmt() int64 {
	if m != nil {
		return m.Amt
	}
	return 0
}

func (m *SendPaymentRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendPaymentRequest) GetFinalCltvDelta() int32 {
	if m != nil {
		return m.FinalCltvDelta
	}
	return 0
}

func (m *SendPaymentRequest) GetPaymentRequest() string {
	if m != nil {
		return m.PaymentRequest
	}
	return ""
}

func (m *SendPaymentRequest) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *SendPaymentRequest) GetFeeLimitAtoms() int64 {
	if m != nil {
		return m.FeeLimitAtoms
	}
	return 0
}

func (m *SendPaymentRequest) GetOutgoingChanId() uint64 {
	if m != nil {
		return m.OutgoingChanId
	}
	return 0
}

func (m *SendPaymentRequest) GetCltvLimit() int32 {
	if m != nil {
		return m.CltvLimit
	}
	return 0
}

func (m *SendPaymentRequest) GetRouteHints() []*lnrpc.RouteHint {
	if m != nil {
		return m.RouteHints
	}
	return nil
}

type TrackPaymentRequest struct {
	// / The hash of the payment to look up.
	PaymentHash          []byte   `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrackPaymentRequest) Reset()         { *m = TrackPaymentRequest{} }
func (m *TrackPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*TrackPaymentRequest) ProtoMessage()    {}
func (*TrackPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{1}
}
func (m *TrackPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrackPaymentRequest.Unmarshal(m, b)
}
func (m *TrackPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrackPaymentRequest.Marshal(b, m, deterministic)
}
func (dst *TrackPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackPaymentRequest.Merge(dst, src)
}
func (m *TrackPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_TrackPaymentRequest.Size(m)
}
func (m *TrackPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TrackPaymentRequest proto.InternalMessageInfo

func (m *TrackPaymentRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

type PaymentStatus struct {
	// / Current state the payment is in.
	State PaymentState `protobuf:"varint,1,opt,name=state,proto3,enum=routerrpc.PaymentState" json:"state,omitempty"`
	// *
	// The pre-image of the payment when state is SUCCEEDED.
	Preimage []byte `protobuf:"bytes,2,opt,name=preimage,proto3" json:"preimage,omitempty"`
	// *
	// The taken route when state is SUCCEEDED.
	Route                *lnrpc.Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PaymentStatus) Reset()         { *m = PaymentStatus{} }
func (m *PaymentStatus) String() string { return proto.CompactTextString(m) }
func (*PaymentStatus) ProtoMessage()    {}
func (*PaymentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{2}
}
func (m *PaymentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentStatus.Unmarshal(m, b)
}
func (m *PaymentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentStatus.Marshal(b, m, deterministic)
}
func (dst *PaymentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentStatus.Merge(dst, src)
}
func (m *PaymentStatus) XXX_Size() int {
	return xxx_messageInfo_PaymentStatus.Size(m)
}
func (m *PaymentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentStatus proto.InternalMessageInfo

func (m *PaymentStatus) GetState() PaymentState {
	if m != nil {
		return m.State
	}
	return PaymentState_IN_FLIGHT
}

func (m *PaymentStatus) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *PaymentStatus) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type RouteFeeRequest struct {
	// *
	// The destination once wishes to obtain a routing fee quote to.
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	// *
	// The amount one wishes to send to the target destination.
	AmtAtoms             int64    `protobuf:"varint,2,opt,name=amt_atoms,json=amtAtoms,proto3" json:"amt_atoms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeRequest) Reset()         { *m = RouteFeeRequest{} }
func (m *RouteFeeRequest) String() string { return proto.CompactTextString(m) }
func (*RouteFeeRequest) ProtoMessage()    {}
func (*RouteFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{3}
}
func (m *RouteFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeRequest.Unmarshal(m, b)
}
func (m *RouteFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeRequest.Marshal(b, m, deterministic)
}
func (dst *RouteFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeRequest.Merge(dst, src)
}
func (m *RouteFeeRequest) XXX_Size() int {
	return xxx_messageInfo_RouteFeeRequest.Size(m)
}
func (m *RouteFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeRequest proto.InternalMessageInfo

func (m *RouteFeeRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *RouteFeeRequest) GetAmtAtoms() int64 {
	if m != nil {
		return m.AmtAtoms
	}
	return 0
}

type RouteFeeResponse struct {
	// *
	// A lower bound of the estimated fee to the target destination within the
	// network, expressed in milli-satoshis.
	RoutingFeeMatoms int64 `protobuf:"varint,1,opt,name=routing_fee_matoms,json=routingFeeMatoms,proto3" json:"routing_fee_matoms,omitempty"`
	// *
	// An estimate of the worst case time delay that can occur. Note that callers
	// will still need to factor in the final CLTV delta of the last hop into this
	// value.
	TimeLockDelay        int64    `protobuf:"varint,2,opt,name=time_lock_delay,json=timeLockDelay,proto3" json:"time_lock_delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeResponse) Reset()         { *m = RouteFeeResponse{} }
func (m *RouteFeeResponse) String() string { return proto.CompactTextString(m) }
func (*RouteFeeResponse) ProtoMessage()    {}
func (*RouteFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{4}
}
func (m *RouteFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeResponse.Unmarshal(m, b)
}
func (m *RouteFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeResponse.Marshal(b, m, deterministic)
}
func (dst *RouteFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeResponse.Merge(dst, src)
}
func (m *RouteFeeResponse) XXX_Size() int {
	return xxx_messageInfo_RouteFeeResponse.Size(m)
}
func (m *RouteFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeResponse proto.InternalMessageInfo

func (m *RouteFeeResponse) GetRoutingFeeMatoms() int64 {
	if m != nil {
		return m.RoutingFeeMatoms
	}
	return 0
}

func (m *RouteFeeResponse) GetTimeLockDelay() int64 {
	if m != nil {
		return m.TimeLockDelay
	}
	return 0
}

type SendToRouteRequest struct {
	// / The payment hash to use for the HTLC.
	PaymentHash []byte `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	// / Route that should be used to attempt to complete the payment.
	Route                *lnrpc.Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SendToRouteRequest) Reset()         { *m = SendToRouteRequest{} }
func (m *SendToRouteRequest) String() string { return proto.CompactTextString(m) }
func (*SendToRouteRequest) ProtoMessage()    {}
func (*SendToRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{5}
}
func (m *SendToRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteRequest.Unmarshal(m, b)
}
func (m *SendToRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteRequest.Marshal(b, m, deterministic)
}
func (dst *SendToRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteRequest.Merge(dst, src)
}
func (m *SendToRouteRequest) XXX_Size() int {
	return xxx_messageInfo_SendToRouteRequest.Size(m)
}
func (m *SendToRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteRequest proto.InternalMessageInfo

func (m *SendToRouteRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendToRouteRequest) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type SendToRouteResponse struct {
	// / The preimage obtained by making the payment.
	Preimage []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	// / The failure message in case the payment failed.
	Failure              *Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendToRouteResponse) Reset()         { *m = SendToRouteResponse{} }
func (m *SendToRouteResponse) String() string { return proto.CompactTextString(m) }
func (*SendToRouteResponse) ProtoMessage()    {}
func (*SendToRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{6}
}
func (m *SendToRouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteResponse.Unmarshal(m, b)
}
func (m *SendToRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteResponse.Marshal(b, m, deterministic)
}
func (dst *SendToRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteResponse.Merge(dst, src)
}
func (m *SendToRouteResponse) XXX_Size() int {
	return xxx_messageInfo_SendToRouteResponse.Size(m)
}
func (m *SendToRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteResponse proto.InternalMessageInfo

func (m *SendToRouteResponse) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *SendToRouteResponse) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type Failure struct {
	// / Failure code as defined in the Lightning spec
	Code Failure_FailureCode `protobuf:"varint,1,opt,name=code,proto3,enum=routerrpc.Failure_FailureCode" json:"code,omitempty"`
	// / An optional channel update message.
	ChannelUpdate *ChannelUpdate `protobuf:"bytes,3,opt,name=channel_update,json=channelUpdate,proto3" json:"channel_update,omitempty"`
	// / A failure type-dependent htlc value.
	HtlcMAtoms uint64 `protobuf:"varint,4,opt,name=htlc_m_atoms,json=htlcMAtoms,proto3" json:"htlc_m_atoms,omitempty"`
	// / The sha256 sum of the onion payload.
	OnionSha_256 []byte `protobuf:"bytes,5,opt,name=onion_sha_256,json=onionSha256,proto3" json:"onion_sha_256,omitempty"`
	// / A failure type-dependent cltv expiry value.
	CltvExpiry uint32 `protobuf:"varint,6,opt,name=cltv_expiry,json=cltvExpiry,proto3" json:"cltv_expiry,omitempty"`
	// / A failure type-dependent flags value.
	Flags uint32 `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	// *
	// The position in the path of the intermediate or final node that generated
	// the failure message. Position zero is the sender node.
	FailureSourceIndex   uint32   `protobuf:"varint,8,opt,name=failure_source_index,json=failureSourceIndex,proto3" json:"failure_source_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{7}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Failure.Unmarshal(m, b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
}
func (dst *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(dst, src)
}
func (m *Failure) XXX_Size() int {
	return xxx_messageInfo_Failure.Size(m)
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetCode() Failure_FailureCode {
	if m != nil {
		return m.Code
	}
	return Failure_RESERVED
}

func (m *Failure) GetChannelUpdate() *ChannelUpdate {
	if m != nil {
		return m.ChannelUpdate
	}
	return nil
}

func (m *Failure) GetHtlcMAtoms() uint64 {
	if m != nil {
		return m.HtlcMAtoms
	}
	return 0
}

func (m *Failure) GetOnionSha_256() []byte {
	if m != nil {
		return m.OnionSha_256
	}
	return nil
}

func (m *Failure) GetCltvExpiry() uint32 {
	if m != nil {
		return m.CltvExpiry
	}
	return 0
}

func (m *Failure) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Failure) GetFailureSourceIndex() uint32 {
	if m != nil {
		return m.FailureSourceIndex
	}
	return 0
}

type ChannelUpdate struct {
	// *
	// The signature that validates the announced data and proves the ownership
	// of node id.
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// *
	// The target chain that this channel was opened within. This value
	// should be the genesis hash of the target chain. Along with the short
	// channel ID, this uniquely identifies the channel globally in a
	// blockchain.
	ChainHash []byte `protobuf:"bytes,2,opt,name=chain_hash,json=chainHash,proto3" json:"chain_hash,omitempty"`
	// *
	// The unique description of the funding transaction.
	ChanId uint64 `protobuf:"varint,3,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	// *
	// A timestamp that allows ordering in the case of multiple announcements.
	// We should ignore the message if timestamp is not greater than the
	// last-received.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// *
	// The bitfield that describes whether optional fields are present in this
	// update. Currently, the least-significant bit must be set to 1 if the
	// optional field MaxHtlc is present.
	MessageFlags uint32 `protobuf:"varint,10,opt,name=message_flags,json=messageFlags,proto3" json:"message_flags,omitempty"`
	// *
	// The bitfield that describes additional meta-data concerning how the
	// update is to be interpreted. Currently, the least-significant bit must be
	// set to 0 if the creating node corresponds to the first node in the
	// previously sent channel announcement and 1 otherwise. If the second bit
	// is set, then the channel is set to be disabled.
	ChannelFlags uint32 `protobuf:"varint,5,opt,name=channel_flags,json=channelFlags,proto3" json:"channel_flags,omitempty"`
	// *
	// The minimum number of blocks this node requires to be added to the expiry
	// of HTLCs. This is a security parameter determined by the node operator.
	// This value represents the required gap between the time locks of the
	// incoming and outgoing HTLC's set to this node.
	TimeLockDelta uint32 `protobuf:"varint,6,opt,name=time_lock_delta,json=timeLockDelta,proto3" json:"time_lock_delta,omitempty"`
	// *
	// The minimum HTLC value which will be accepted.
	HtlcMinimumMAtoms uint64 `protobuf:"varint,7,opt,name=htlc_minimum_m_atoms,json=htlcMinimumMAtoms,proto3" json:"htlc_minimum_m_atoms,omitempty"`
	// *
	// The base fee that must be used for incoming HTLC's to this particular
	// channel. This value will be tacked onto the required for a payment
	// independent of the size of the payment.
	BaseFee uint32 `protobuf:"varint,8,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	// *
	// The fee rate that will be charged per millionth of a satoshi.
	FeeRate uint32 `protobuf:"varint,9,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	// *
	// The maximum HTLC value which will be accepted.
	HtlcMaximumMAtoms uint64 `protobuf:"varint,11,opt,name=htlc_maximum_m_atoms,json=htlcMaximumMAtoms,proto3" json:"htlc_maximum_m_atoms,omitempty"`
	// *
	// The set of data that was appended to this message, some of which we may
	// not actually know how to iterate or parse. By holding onto this data, we
	// ensure that we're able to properly validate the set of signatures that
	// cover these new fields, and ensure we're able to make upgrades to the
	// network in a forwards compatible manner.
	ExtraOpaqueData      []byte   `protobuf:"bytes,12,opt,name=extra_opaque_data,json=extraOpaqueData,proto3" json:"extra_opaque_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelUpdate) Reset()         { *m = ChannelUpdate{} }
func (m *ChannelUpdate) String() string { return proto.CompactTextString(m) }
func (*ChannelUpdate) ProtoMessage()    {}
func (*ChannelUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{8}
}
func (m *ChannelUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelUpdate.Unmarshal(m, b)
}
func (m *ChannelUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelUpdate.Marshal(b, m, deterministic)
}
func (dst *ChannelUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelUpdate.Merge(dst, src)
}
func (m *ChannelUpdate) XXX_Size() int {
	return xxx_messageInfo_ChannelUpdate.Size(m)
}
func (m *ChannelUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelUpdate proto.InternalMessageInfo

func (m *ChannelUpdate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ChannelUpdate) GetChainHash() []byte {
	if m != nil {
		return m.ChainHash
	}
	return nil
}

func (m *ChannelUpdate) GetChanId() uint64 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ChannelUpdate) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChannelUpdate) GetMessageFlags() uint32 {
	if m != nil {
		return m.MessageFlags
	}
	return 0
}

func (m *ChannelUpdate) GetChannelFlags() uint32 {
	if m != nil {
		return m.ChannelFlags
	}
	return 0
}

func (m *ChannelUpdate) GetTimeLockDelta() uint32 {
	if m != nil {
		return m.TimeLockDelta
	}
	return 0
}

func (m *ChannelUpdate) GetHtlcMinimumMAtoms() uint64 {
	if m != nil {
		return m.HtlcMinimumMAtoms
	}
	return 0
}

func (m *ChannelUpdate) GetBaseFee() uint32 {
	if m != nil {
		return m.BaseFee
	}
	return 0
}

func (m *ChannelUpdate) GetFeeRate() uint32 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

func (m *ChannelUpdate) GetHtlcMaximumMAtoms() uint64 {
	if m != nil {
		return m.HtlcMaximumMAtoms
	}
	return 0
}

func (m *ChannelUpdate) GetExtraOpaqueData() []byte {
	if m != nil {
		return m.ExtraOpaqueData
	}
	return nil
}

type ResetMissionControlRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetMissionControlRequest) Reset()         { *m = ResetMissionControlRequest{} }
func (m *ResetMissionControlRequest) String() string { return proto.CompactTextString(m) }
func (*ResetMissionControlRequest) ProtoMessage()    {}
func (*ResetMissionControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{9}
}
func (m *ResetMissionControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetMissionControlRequest.Unmarshal(m, b)
}
func (m *ResetMissionControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetMissionControlRequest.Marshal(b, m, deterministic)
}
func (dst *ResetMissionControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMissionControlRequest.Merge(dst, src)
}
func (m *ResetMissionControlRequest) XXX_Size() int {
	return xxx_messageInfo_ResetMissionControlRequest.Size(m)
}
func (m *ResetMissionControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMissionControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMissionControlRequest proto.InternalMessageInfo

type ResetMissionControlResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetMissionControlResponse) Reset()         { *m = ResetMissionControlResponse{} }
func (m *ResetMissionControlResponse) String() string { return proto.CompactTextString(m) }
func (*ResetMissionControlResponse) ProtoMessage()    {}
func (*ResetMissionControlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{10}
}
func (m *ResetMissionControlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetMissionControlResponse.Unmarshal(m, b)
}
func (m *ResetMissionControlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetMissionControlResponse.Marshal(b, m, deterministic)
}
func (dst *ResetMissionControlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetMissionControlResponse.Merge(dst, src)
}
func (m *ResetMissionControlResponse) XXX_Size() int {
	return xxx_messageInfo_ResetMissionControlResponse.Size(m)
}
func (m *ResetMissionControlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetMissionControlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResetMissionControlResponse proto.InternalMessageInfo

type QueryMissionControlRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryMissionControlRequest) Reset()         { *m = QueryMissionControlRequest{} }
func (m *QueryMissionControlRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMissionControlRequest) ProtoMessage()    {}
func (*QueryMissionControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{11}
}
func (m *QueryMissionControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryMissionControlRequest.Unmarshal(m, b)
}
func (m *QueryMissionControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryMissionControlRequest.Marshal(b, m, deterministic)
}
func (dst *QueryMissionControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionControlRequest.Merge(dst, src)
}
func (m *QueryMissionControlRequest) XXX_Size() int {
	return xxx_messageInfo_QueryMissionControlRequest.Size(m)
}
func (m *QueryMissionControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionControlRequest proto.InternalMessageInfo

// / QueryMissionControlResponse contains mission control state per node.
type QueryMissionControlResponse struct {
	Nodes                []*NodeHistory `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *QueryMissionControlResponse) Reset()         { *m = QueryMissionControlResponse{} }
func (m *QueryMissionControlResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMissionControlResponse) ProtoMessage()    {}
func (*QueryMissionControlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{12}
}
func (m *QueryMissionControlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryMissionControlResponse.Unmarshal(m, b)
}
func (m *QueryMissionControlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryMissionControlResponse.Marshal(b, m, deterministic)
}
func (dst *QueryMissionControlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMissionControlResponse.Merge(dst, src)
}
func (m *QueryMissionControlResponse) XXX_Size() int {
	return xxx_messageInfo_QueryMissionControlResponse.Size(m)
}
func (m *QueryMissionControlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMissionControlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMissionControlResponse proto.InternalMessageInfo

func (m *QueryMissionControlResponse) GetNodes() []*NodeHistory {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// / NodeHistory contains the mission control state for a particular node.
type NodeHistory struct {
	// / Node pubkey
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// / Time stamp of last failure. Set to zero if no failure happened yet.
	LastFailTime int64 `protobuf:"varint,2,opt,name=last_fail_time,proto3" json:"last_fail_time,omitempty"`
	// / Estimation of success probability for channels not in the channel array.
	OtherChanSuccessProb float32 `protobuf:"fixed32,3,opt,name=other_chan_success_prob,proto3" json:"other_chan_success_prob,omitempty"`
	// / Historical information of particular channels.
	Channels             []*ChannelHistory `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeHistory) Reset()         { *m = NodeHistory{} }
func (m *NodeHistory) String() string { return proto.CompactTextString(m) }
func (*NodeHistory) ProtoMessage()    {}
func (*NodeHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{13}
}
func (m *NodeHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeHistory.Unmarshal(m, b)
}
func (m *NodeHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeHistory.Marshal(b, m, deterministic)
}
func (dst *NodeHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeHistory.Merge(dst, src)
}
func (m *NodeHistory) XXX_Size() int {
	return xxx_messageInfo_NodeHistory.Size(m)
}
func (m *NodeHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeHistory.DiscardUnknown(m)
}

var xxx_messageInfo_NodeHistory proto.InternalMessageInfo

func (m *NodeHistory) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *NodeHistory) GetLastFailTime() int64 {
	if m != nil {
		return m.LastFailTime
	}
	return 0
}

func (m *NodeHistory) GetOtherChanSuccessProb() float32 {
	if m != nil {
		return m.OtherChanSuccessProb
	}
	return 0
}

func (m *NodeHistory) GetChannels() []*ChannelHistory {
	if m != nil {
		return m.Channels
	}
	return nil
}

// / NodeHistory contains the mission control state for a particular channel.
type ChannelHistory struct {
	// / Short channel id
	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,proto3" json:"channel_id,omitempty"`
	// / Time stamp of last failure.
	LastFailTime int64 `protobuf:"varint,2,opt,name=last_fail_time,proto3" json:"last_fail_time,omitempty"`
	// / Minimum penalization amount.
	MinPenalizeAmtAtoms int64 `protobuf:"varint,3,opt,name=min_penalize_amt_atoms,proto3" json:"min_penalize_amt_atoms,omitempty"`
	// / Estimation of success probability for this channel.
	SuccessProb          float32  `protobuf:"fixed32,4,opt,name=success_prob,proto3" json:"success_prob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelHistory) Reset()         { *m = ChannelHistory{} }
func (m *ChannelHistory) String() string { return proto.CompactTextString(m) }
func (*ChannelHistory) ProtoMessage()    {}
func (*ChannelHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_a36b93651fdf7578, []int{14}
}
func (m *ChannelHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelHistory.Unmarshal(m, b)
}
func (m *ChannelHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelHistory.Marshal(b, m, deterministic)
}
func (dst *ChannelHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelHistory.Merge(dst, src)
}
func (m *ChannelHistory) XXX_Size() int {
	return xxx_messageInfo_ChannelHistory.Size(m)
}
func (m *ChannelHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelHistory proto.InternalMessageInfo

func (m *ChannelHistory) GetChannelId() uint64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *ChannelHistory) GetLastFailTime() int64 {
	if m != nil {
		return m.LastFailTime
	}
	return 0
}

func (m *ChannelHistory) GetMinPenalizeAmtAtoms() int64 {
	if m != nil {
		return m.MinPenalizeAmtAtoms
	}
	return 0
}

func (m *ChannelHistory) GetSuccessProb() float32 {
	if m != nil {
		return m.SuccessProb
	}
	return 0
}

func init() {
	proto.RegisterType((*SendPaymentRequest)(nil), "routerrpc.SendPaymentRequest")
	proto.RegisterType((*TrackPaymentRequest)(nil), "routerrpc.TrackPaymentRequest")
	proto.RegisterType((*PaymentStatus)(nil), "routerrpc.PaymentStatus")
	proto.RegisterType((*RouteFeeRequest)(nil), "routerrpc.RouteFeeRequest")
	proto.RegisterType((*RouteFeeResponse)(nil), "routerrpc.RouteFeeResponse")
	proto.RegisterType((*SendToRouteRequest)(nil), "routerrpc.SendToRouteRequest")
	proto.RegisterType((*SendToRouteResponse)(nil), "routerrpc.SendToRouteResponse")
	proto.RegisterType((*Failure)(nil), "routerrpc.Failure")
	proto.RegisterType((*ChannelUpdate)(nil), "routerrpc.ChannelUpdate")
	proto.RegisterType((*ResetMissionControlRequest)(nil), "routerrpc.ResetMissionControlRequest")
	proto.RegisterType((*ResetMissionControlResponse)(nil), "routerrpc.ResetMissionControlResponse")
	proto.RegisterType((*QueryMissionControlRequest)(nil), "routerrpc.QueryMissionControlRequest")
	proto.RegisterType((*QueryMissionControlResponse)(nil), "routerrpc.QueryMissionControlResponse")
	proto.RegisterType((*NodeHistory)(nil), "routerrpc.NodeHistory")
	proto.RegisterType((*ChannelHistory)(nil), "routerrpc.ChannelHistory")
	proto.RegisterEnum("routerrpc.PaymentState", PaymentState_name, PaymentState_value)
	proto.RegisterEnum("routerrpc.Failure_FailureCode", Failure_FailureCode_name, Failure_FailureCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	// *
	// SendPayment attempts to route a payment described by the passed
	// PaymentRequest to the final destination. The call returns a stream of
	// payment status updates.
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (Router_SendPaymentClient, error)
	// *
	// TrackPayment returns an update stream for the payment identified by the
	// payment hash.
	TrackPayment(ctx context.Context, in *TrackPaymentRequest, opts ...grpc.CallOption) (Router_TrackPaymentClient, error)
	// *
	// EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	// may cost to send an HTLC to the target end destination.
	EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error)
	// *
	// SendToRoute attempts to make a payment via the specified route. This method
	// differs from SendPayment in that it allows users to specify a full route
	// manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error)
	// *
	// ResetMissionControl clears all mission control state and starts with a clean
	// slate.
	ResetMissionControl(ctx context.Context, in *ResetMissionControlRequest, opts ...grpc.CallOption) (*ResetMissionControlResponse, error)
	// *
	// QueryMissionControl exposes the internal mission control state to callers.
	// It is a development feature.
	QueryMissionControl(ctx context.Context, in *QueryMissionControlRequest, opts ...grpc.CallOption) (*QueryMissionControlResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (Router_SendPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/routerrpc.Router/SendPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerSendPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_SendPaymentClient interface {
	Recv() (*PaymentStatus, error)
	grpc.ClientStream
}

type routerSendPaymentClient struct {
	grpc.ClientStream
}

func (x *routerSendPaymentClient) Recv() (*PaymentStatus, error) {
	m := new(PaymentStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) TrackPayment(ctx context.Context, in *TrackPaymentRequest, opts ...grpc.CallOption) (Router_TrackPaymentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[1], "/routerrpc.Router/TrackPayment", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerTrackPaymentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_TrackPaymentClient interface {
	Recv() (*PaymentStatus, error)
	grpc.ClientStream
}

type routerTrackPaymentClient struct {
	grpc.ClientStream
}

func (x *routerTrackPaymentClient) Recv() (*PaymentStatus, error) {
	m := new(PaymentStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error) {
	out := new(RouteFeeResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/EstimateRouteFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error) {
	out := new(SendToRouteResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/SendToRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) ResetMissionControl(ctx context.Context, in *ResetMissionControlRequest, opts ...grpc.CallOption) (*ResetMissionControlResponse, error) {
	out := new(ResetMissionControlResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/ResetMissionControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) QueryMissionControl(ctx context.Context, in *QueryMissionControlRequest, opts ...grpc.CallOption) (*QueryMissionControlResponse, error) {
	out := new(QueryMissionControlResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/QueryMissionControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	// *
	// SendPayment attempts to route a payment described by the passed
	// PaymentRequest to the final destination. The call returns a stream of
	// payment status updates.
	SendPayment(*SendPaymentRequest, Router_SendPaymentServer) error
	// *
	// TrackPayment returns an update stream for the payment identified by the
	// payment hash.
	TrackPayment(*TrackPaymentRequest, Router_TrackPaymentServer) error
	// *
	// EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	// may cost to send an HTLC to the target end destination.
	EstimateRouteFee(context.Context, *RouteFeeRequest) (*RouteFeeResponse, error)
	// *
	// SendToRoute attempts to make a payment via the specified route. This method
	// differs from SendPayment in that it allows users to specify a full route
	// manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(context.Context, *SendToRouteRequest) (*SendToRouteResponse, error)
	// *
	// ResetMissionControl clears all mission control state and starts with a clean
	// slate.
	ResetMissionControl(context.Context, *ResetMissionControlRequest) (*ResetMissionControlResponse, error)
	// *
	// QueryMissionControl exposes the internal mission control state to callers.
	// It is a development feature.
	QueryMissionControl(context.Context, *QueryMissionControlRequest) (*QueryMissionControlResponse, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_SendPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).SendPayment(m, &routerSendPaymentServer{stream})
}

type Router_SendPaymentServer interface {
	Send(*PaymentStatus) error
	grpc.ServerStream
}

type routerSendPaymentServer struct {
	grpc.ServerStream
}

func (x *routerSendPaymentServer) Send(m *PaymentStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_TrackPayment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).TrackPayment(m, &routerTrackPaymentServer{stream})
}

type Router_TrackPaymentServer interface {
	Send(*PaymentStatus) error
	grpc.ServerStream
}

type routerTrackPaymentServer struct {
	grpc.ServerStream
}

func (x *routerTrackPaymentServer) Send(m *PaymentStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_EstimateRouteFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).EstimateRouteFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/EstimateRouteFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).EstimateRouteFee(ctx, req.(*RouteFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_SendToRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SendToRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/SendToRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SendToRoute(ctx, req.(*SendToRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_ResetMissionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetMissionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ResetMissionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/ResetMissionControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ResetMissionControl(ctx, req.(*ResetMissionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_QueryMissionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMissionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).QueryMissionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/QueryMissionControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).QueryMissionControl(ctx, req.(*QueryMissionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerrpc.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstimateRouteFee",
			Handler:    _Router_EstimateRouteFee_Handler,
		},
		{
			MethodName: "SendToRoute",
			Handler:    _Router_SendToRoute_Handler,
		},
		{
			MethodName: "ResetMissionControl",
			Handler:    _Router_ResetMissionControl_Handler,
		},
		{
			MethodName: "QueryMissionControl",
			Handler:    _Router_QueryMissionControl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendPayment",
			Handler:       _Router_SendPayment_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TrackPayment",
			Handler:       _Router_TrackPayment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "routerrpc/router.proto",
}

func init() { proto.RegisterFile("routerrpc/router.proto", fileDescriptor_router_a36b93651fdf7578) }

var fileDescriptor_router_a36b93651fdf7578 = []byte{
	// 1653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0x4f, 0x73, 0xdb, 0xc6,
	0x15, 0x0f, 0x45, 0x52, 0x14, 0x1f, 0xff, 0x41, 0x2b, 0x59, 0xa6, 0x29, 0xcb, 0x51, 0x98, 0xd6,
	0xd1, 0x78, 0x52, 0x29, 0xa3, 0x8e, 0x3d, 0xb9, 0x75, 0x68, 0x72, 0x19, 0x22, 0x26, 0x01, 0x65,
	0x49, 0x3a, 0x71, 0x7b, 0xd8, 0x59, 0x01, 0x2b, 0x11, 0x63, 0x02, 0x60, 0x80, 0x65, 0xc6, 0xea,
	0xa1, 0xb7, 0xce, 0xf4, 0xd2, 0x6f, 0xd3, 0x4b, 0x2f, 0xf9, 0x38, 0xed, 0xb7, 0xe8, 0x74, 0x76,
	0x17, 0x24, 0x41, 0x8a, 0x72, 0x7c, 0x12, 0xf1, 0xfb, 0xbd, 0x7d, 0x6f, 0xdf, 0x7b, 0xfb, 0xfe,
	0x08, 0x8e, 0xa2, 0x70, 0x2e, 0x78, 0x14, 0xcd, 0x9c, 0x0b, 0xfd, 0xeb, 0x7c, 0x16, 0x85, 0x22,
	0x44, 0xc5, 0x25, 0xde, 0x28, 0x46, 0x33, 0x47, 0xa3, 0xcd, 0xff, 0xed, 0x00, 0x1a, 0xf2, 0xc0,
	0xbd, 0x62, 0x77, 0x3e, 0x0f, 0x04, 0xe1, 0x3f, 0xcf, 0x79, 0x2c, 0x10, 0x82, 0x9c, 0xcb, 0x63,
	0x51, 0xcf, 0x9c, 0x66, 0xce, 0xca, 0x44, 0xfd, 0x46, 0x06, 0x64, 0x99, 0x2f, 0xea, 0x3b, 0xa7,
	0x99, 0xb3, 0x2c, 0x91, 0x3f, 0xd1, 0x17, 0x50, 0x9e, 0xe9, 0x73, 0x74, 0xc2, 0xe2, 0x49, 0x3d,
	0xab, 0xa4, 0x4b, 0x09, 0xd6, 0x63, 0xf1, 0x04, 0x9d, 0x81, 0x71, 0xe3, 0x05, 0x6c, 0x4a, 0x9d,
	0xa9, 0xf8, 0x85, 0xba, 0x7c, 0x2a, 0x58, 0x3d, 0x77, 0x9a, 0x39, 0xcb, 0x93, 0xaa, 0xc2, 0xdb,
	0x53, 0xf1, 0x4b, 0x47, 0xa2, 0xe8, 0x2b, 0xa8, 0x2d, 0x94, 0x45, 0xfa, 0x16, 0xf5, 0xfc, 0x69,
	0xe6, 0xac, 0x48, 0xaa, 0xb3, 0xf5, 0xbb, 0x7d, 0x05, 0x35, 0xe1, 0xf9, 0x3c, 0x9c, 0x0b, 0x1a,
	0x73, 0x27, 0x0c, 0xdc, 0xb8, 0xbe, 0xab, 0x35, 0x26, 0xf0, 0x50, 0xa3, 0xe8, 0x39, 0xd4, 0x6e,
	0x38, 0xa7, 0x53, 0xcf, 0xf7, 0x04, 0x65, 0x22, 0xf4, 0xe3, 0x7a, 0x41, 0x5d, 0xbe, 0x72, 0xc3,
	0x79, 0x5f, 0xa2, 0x2d, 0x09, 0xca, 0x3b, 0x86, 0x73, 0x71, 0x1b, 0x7a, 0xc1, 0x2d, 0x75, 0x26,
	0x2c, 0xa0, 0x9e, 0x5b, 0xdf, 0x3b, 0xcd, 0x9c, 0xe5, 0x48, 0x75, 0x81, 0xb7, 0x27, 0x2c, 0x30,
	0x5d, 0x74, 0x02, 0xa0, 0xfc, 0x50, 0x2a, 0xeb, 0x45, 0x65, 0xb5, 0x28, 0x11, 0xa5, 0x0d, 0x5d,
	0x42, 0x49, 0x05, 0x99, 0x4e, 0xbc, 0x40, 0xc4, 0x75, 0x38, 0xcd, 0x9e, 0x95, 0x2e, 0x8d, 0xf3,
	0x69, 0x20, 0xe3, 0x4d, 0x24, 0xd3, 0xf3, 0x02, 0x41, 0xd2, 0x42, 0xcd, 0x6f, 0xe1, 0x60, 0x14,
	0x31, 0xe7, 0xfd, 0x46, 0x02, 0x36, 0x43, 0x9b, 0xb9, 0x17, 0xda, 0xe6, 0xdf, 0xa0, 0x92, 0x1c,
	0x1a, 0x0a, 0x26, 0xe6, 0x31, 0xfa, 0x03, 0xe4, 0x63, 0xc1, 0x04, 0x57, 0xc2, 0xd5, 0xcb, 0xc7,
	0xe7, 0xcb, 0x8c, 0x9f, 0xa7, 0x04, 0x39, 0xd1, 0x52, 0xa8, 0x01, 0x7b, 0xb3, 0x88, 0x7b, 0x3e,
	0xbb, 0xe5, 0x2a, 0xa9, 0x65, 0xb2, 0xfc, 0x46, 0x4d, 0xc8, 0xab, 0xc3, 0x2a, 0xa5, 0xa5, 0xcb,
	0x72, 0xda, 0x07, 0xa2, 0xa9, 0xe6, 0x6b, 0xa8, 0xa9, 0xef, 0x2e, 0xe7, 0x1f, 0x7b, 0x36, 0xc7,
	0x50, 0x64, 0xfe, 0x22, 0xfe, 0xfa, 0xf1, 0xec, 0x31, 0x5f, 0x87, 0xbe, 0x39, 0x01, 0x63, 0xa5,
	0x23, 0x9e, 0x85, 0x41, 0xcc, 0xd1, 0xd7, 0x80, 0xa4, 0x01, 0x99, 0x0d, 0x99, 0x3e, 0x5f, 0x9f,
	0xcc, 0xa8, 0x93, 0x46, 0xc2, 0x74, 0x39, 0x1f, 0x28, 0x5c, 0x26, 0x59, 0xa6, 0x9d, 0x4e, 0x43,
	0xe7, 0xbd, 0x7c, 0x5f, 0xec, 0x2e, 0x31, 0x52, 0x91, 0x70, 0x3f, 0x74, 0xde, 0x77, 0x24, 0xd8,
	0xfc, 0x8b, 0x7e, 0xe7, 0xa3, 0x50, 0xfb, 0xf0, 0xc9, 0x61, 0x5e, 0x85, 0x62, 0xe7, 0xe1, 0x50,
	0x50, 0x38, 0x58, 0x53, 0x9e, 0x78, 0x92, 0x8e, 0x70, 0x66, 0x23, 0xc2, 0x5f, 0x43, 0xe1, 0x86,
	0x79, 0xd3, 0x79, 0xb4, 0x50, 0x8c, 0x52, 0xe9, 0xea, 0x6a, 0x86, 0x2c, 0x44, 0x9a, 0xbf, 0x16,
	0xa0, 0x90, 0x80, 0xe8, 0x12, 0x72, 0x4e, 0xe8, 0x2e, 0xb2, 0xfc, 0xec, 0xfe, 0xb1, 0xc5, 0xdf,
	0x76, 0xe8, 0x72, 0xa2, 0x64, 0xd1, 0x9f, 0xa0, 0x2a, 0x5f, 0x76, 0xc0, 0xa7, 0x74, 0x3e, 0x73,
	0xd9, 0x32, 0xb1, 0xf5, 0xd4, 0xe9, 0xb6, 0x16, 0x18, 0x2b, 0x9e, 0x54, 0x9c, 0xf4, 0x27, 0x3a,
	0x85, 0xf2, 0x44, 0x4c, 0x1d, 0xea, 0x27, 0x89, 0xcc, 0xa9, 0xfa, 0x00, 0x89, 0x0d, 0x74, 0x15,
	0x35, 0xa1, 0x12, 0x06, 0x5e, 0x18, 0xd0, 0x78, 0xc2, 0xe8, 0xe5, 0xcb, 0x57, 0xaa, 0x7a, 0xcb,
	0xa4, 0xa4, 0xc0, 0xe1, 0x84, 0x5d, 0xbe, 0x7c, 0x85, 0x3e, 0x87, 0x92, 0xaa, 0x1f, 0xfe, 0x61,
	0xe6, 0x45, 0x77, 0xaa, 0x6c, 0x2b, 0x44, 0x95, 0x14, 0x56, 0x08, 0x3a, 0x84, 0xfc, 0xcd, 0x94,
	0xdd, 0xea, 0x42, 0xad, 0x10, 0xfd, 0x81, 0xbe, 0x81, 0xc3, 0x24, 0x10, 0x34, 0x0e, 0xe7, 0x91,
	0xc3, 0xa9, 0x17, 0xb8, 0xfc, 0x83, 0x2a, 0xd2, 0x0a, 0x41, 0x09, 0x37, 0x54, 0x94, 0x29, 0x99,
	0xe6, 0x3f, 0xf2, 0x50, 0x4a, 0x45, 0x01, 0x95, 0x61, 0x8f, 0xe0, 0x21, 0x26, 0x6f, 0x71, 0xc7,
	0xf8, 0x0c, 0xd5, 0xe1, 0x70, 0x6c, 0xbd, 0xb1, 0xec, 0x1f, 0x2d, 0x7a, 0xd5, 0x7a, 0x37, 0xc0,
	0xd6, 0x88, 0xf6, 0x5a, 0xc3, 0x9e, 0x91, 0x41, 0x4f, 0xa1, 0x6e, 0x5a, 0x6d, 0x9b, 0x10, 0xdc,
	0x1e, 0x2d, 0xb9, 0xd6, 0xc0, 0x1e, 0x5b, 0x23, 0x63, 0x07, 0x7d, 0x0e, 0xc7, 0x5d, 0xd3, 0x6a,
	0xf5, 0xe9, 0x4a, 0xa6, 0xdd, 0x1f, 0xbd, 0xa5, 0xf8, 0xa7, 0x2b, 0x93, 0xbc, 0x33, 0xb2, 0xdb,
	0x04, 0x7a, 0xa3, 0x7e, 0x7b, 0xa1, 0x21, 0x87, 0x9e, 0xc0, 0x23, 0x2d, 0xa0, 0x8f, 0xd0, 0x91,
	0x6d, 0xd3, 0xa1, 0x6d, 0x5b, 0x46, 0x1e, 0xed, 0x43, 0xc5, 0xb4, 0xde, 0xb6, 0xfa, 0x66, 0x87,
	0x12, 0xdc, 0xea, 0x0f, 0x8c, 0x5d, 0x74, 0x00, 0xb5, 0x4d, 0xb9, 0x82, 0x54, 0xb1, 0x90, 0xb3,
	0x2d, 0xd3, 0xb6, 0xe8, 0x5b, 0x4c, 0x86, 0xa6, 0x6d, 0x19, 0x7b, 0xe8, 0x08, 0xd0, 0x3a, 0xd5,
	0x1b, 0xb4, 0xda, 0x46, 0x11, 0x3d, 0x82, 0xfd, 0x75, 0xfc, 0x0d, 0x7e, 0x67, 0x80, 0x0c, 0x83,
	0xbe, 0x18, 0x7d, 0x8d, 0xfb, 0xf6, 0x8f, 0x74, 0x60, 0x5a, 0xe6, 0x60, 0x3c, 0x30, 0x4a, 0xe8,
	0x10, 0x8c, 0x2e, 0xc6, 0xd4, 0xb4, 0x86, 0xe3, 0x6e, 0xd7, 0x6c, 0x9b, 0xd8, 0x1a, 0x19, 0x65,
	0x6d, 0x79, 0x9b, 0xe3, 0x15, 0x79, 0xa0, 0xdd, 0x6b, 0x59, 0x16, 0xee, 0xd3, 0x8e, 0x39, 0x6c,
	0xbd, 0xee, 0xe3, 0x8e, 0x51, 0x45, 0x27, 0xf0, 0x64, 0x84, 0x07, 0x57, 0x36, 0x69, 0x91, 0x77,
	0x74, 0xc1, 0x77, 0x5b, 0x66, 0x7f, 0x4c, 0xb0, 0x51, 0x43, 0x5f, 0xc0, 0x09, 0xc1, 0x3f, 0x8c,
	0x4d, 0x82, 0x3b, 0xd4, 0xb2, 0x3b, 0x98, 0x76, 0x71, 0x6b, 0x34, 0x26, 0x98, 0x0e, 0xcc, 0xe1,
	0xd0, 0xb4, 0xbe, 0x33, 0x0c, 0xf4, 0x3b, 0x38, 0x5d, 0x8a, 0x2c, 0x15, 0x6c, 0x48, 0xed, 0x4b,
	0xff, 0x16, 0xf9, 0xb4, 0xf0, 0x4f, 0x23, 0x7a, 0x85, 0x31, 0x31, 0x10, 0x6a, 0xc0, 0xd1, 0xca,
	0xbc, 0x36, 0x90, 0xd8, 0x3e, 0x90, 0xdc, 0x15, 0x26, 0x83, 0x96, 0x25, 0x13, 0xbc, 0xc6, 0x1d,
	0xca, 0x6b, 0xaf, 0xb8, 0xcd, 0x6b, 0x3f, 0x42, 0x87, 0x50, 0x5b, 0x58, 0x5b, 0x80, 0xff, 0x29,
	0xa0, 0xc7, 0x80, 0xc6, 0x16, 0xc1, 0xad, 0x8e, 0x74, 0x7e, 0x49, 0xfc, 0xb7, 0xf0, 0x7d, 0x6e,
	0x6f, 0xc7, 0xc8, 0x36, 0xff, 0x9d, 0x85, 0xca, 0x5a, 0x81, 0xa1, 0xa7, 0x50, 0x8c, 0xbd, 0xdb,
	0x80, 0x09, 0xd9, 0x02, 0x74, 0x77, 0x58, 0x01, 0x6a, 0xd2, 0x4c, 0x98, 0x17, 0xe8, 0xb6, 0xa4,
	0xdb, 0x73, 0x51, 0x21, 0xaa, 0x29, 0x3d, 0x86, 0xc2, 0x62, 0x52, 0x65, 0x55, 0x25, 0xee, 0x3a,
	0x7a, 0x42, 0x3d, 0x85, 0xa2, 0xec, 0x7b, 0xb1, 0x60, 0xfe, 0x4c, 0x15, 0x69, 0x85, 0xac, 0x00,
	0xf4, 0x25, 0x54, 0x7c, 0x1e, 0xc7, 0xec, 0x96, 0x53, 0x5d, 0x66, 0xa0, 0x24, 0xca, 0x09, 0xd8,
	0x55, 0xd5, 0xf6, 0x25, 0x2c, 0x6a, 0x3f, 0x11, 0xca, 0x6b, 0xa1, 0x04, 0xd4, 0x42, 0x9b, 0x6d,
	0x57, 0xb0, 0xa4, 0x9a, 0xd3, 0x6d, 0x57, 0x30, 0x74, 0x01, 0x87, 0xba, 0x6f, 0x78, 0x81, 0xe7,
	0xcf, 0xfd, 0x65, 0xff, 0x28, 0xa8, 0x5b, 0xef, 0xab, 0xfe, 0xa1, 0xa9, 0xa4, 0x8d, 0x3c, 0x81,
	0xbd, 0x6b, 0x16, 0x73, 0xd9, 0xfa, 0x93, 0xfa, 0x2e, 0xc8, 0xef, 0x2e, 0xe7, 0x92, 0x92, 0x03,
	0x21, 0x92, 0xed, 0xab, 0xa8, 0xa9, 0x1b, 0xce, 0x89, 0x0c, 0xe6, 0xd2, 0x0c, 0xfb, 0xb0, 0x66,
	0xa6, 0x94, 0x32, 0xa3, 0xa9, 0xc4, 0xcc, 0x0b, 0xd8, 0xe7, 0x1f, 0x44, 0xc4, 0x68, 0x38, 0x63,
	0x3f, 0xcf, 0x39, 0x75, 0x99, 0x60, 0xf5, 0xb2, 0x0a, 0x73, 0x4d, 0x11, 0xb6, 0xc2, 0x3b, 0x4c,
	0xb0, 0xe6, 0x53, 0x68, 0x10, 0x1e, 0x73, 0x31, 0xf0, 0xe2, 0xd8, 0x0b, 0x83, 0x76, 0x18, 0x88,
	0x28, 0x9c, 0x26, 0x23, 0xa4, 0x79, 0x02, 0xc7, 0x5b, 0x59, 0x3d, 0x03, 0xe4, 0xe1, 0x1f, 0xe6,
	0x3c, 0xba, 0xdb, 0x7e, 0xf8, 0x0d, 0x1c, 0x6f, 0x65, 0x97, 0xa3, 0x30, 0x1f, 0x84, 0x2e, 0x97,
	0xd3, 0x4f, 0xae, 0x12, 0x47, 0xa9, 0x6e, 0x6d, 0x85, 0x2e, 0xef, 0x79, 0xb1, 0x08, 0xa3, 0x3b,
	0xa2, 0x85, 0x9a, 0xbf, 0x66, 0xa0, 0x94, 0x82, 0xd1, 0x11, 0xec, 0xce, 0xe6, 0xd7, 0xef, 0xf9,
	0x5d, 0xf2, 0xbc, 0x92, 0x2f, 0xf4, 0x1c, 0xaa, 0x53, 0x16, 0x0b, 0x2a, 0xfb, 0x26, 0x95, 0xe9,
	0x4a, 0x26, 0xe6, 0x06, 0x8a, 0xbe, 0x85, 0xc7, 0xa1, 0x98, 0xf0, 0x48, 0x2f, 0x45, 0xf1, 0xdc,
	0x71, 0x78, 0x1c, 0xd3, 0x59, 0x14, 0x5e, 0xab, 0x47, 0xb7, 0x43, 0x1e, 0xa2, 0xd1, 0x4b, 0xd8,
	0x4b, 0x5e, 0x8b, 0x9c, 0x14, 0xf2, 0xea, 0x4f, 0xee, 0x0f, 0x9a, 0xc5, 0xed, 0x97, 0xa2, 0xcd,
	0x7f, 0x65, 0xa0, 0xba, 0x4e, 0xa2, 0x67, 0xaa, 0x0e, 0xd4, 0x63, 0xf4, 0x5c, 0xe5, 0x47, 0x8e,
	0xa4, 0x90, 0x4f, 0xf6, 0xe5, 0x15, 0x1c, 0xf9, 0x5e, 0x40, 0x67, 0x3c, 0x60, 0x53, 0xef, 0xaf,
	0x9c, 0xae, 0x56, 0x92, 0xac, 0x92, 0x7f, 0x80, 0x45, 0x4d, 0x28, 0xaf, 0x39, 0x9e, 0x53, 0x8e,
	0xaf, 0x61, 0x2f, 0xfe, 0x99, 0x81, 0x72, 0x7a, 0xc1, 0x42, 0x15, 0x28, 0x9a, 0x16, 0xed, 0xf6,
	0xcd, 0xef, 0x7a, 0x23, 0xe3, 0x33, 0xf9, 0x39, 0x1c, 0xb7, 0xdb, 0x18, 0x77, 0x70, 0xc7, 0xc8,
	0x20, 0x04, 0x55, 0xd9, 0x1e, 0x70, 0x87, 0x8e, 0xcc, 0x01, 0xb6, 0xc7, 0x72, 0xb2, 0x1c, 0x40,
	0x2d, 0xc1, 0x2c, 0x9b, 0x12, 0x7b, 0x3c, 0xc2, 0x46, 0x16, 0x19, 0x50, 0x4e, 0x40, 0x4c, 0x88,
	0x4d, 0x8c, 0x9c, 0x6c, 0x87, 0x09, 0x72, 0x7f, 0x4a, 0x75, 0xf0, 0xa8, 0x65, 0xf6, 0x87, 0x46,
	0xfe, 0xf2, 0xef, 0x39, 0xd8, 0x55, 0x8b, 0x48, 0x84, 0x7a, 0x50, 0x4a, 0x6d, 0xf7, 0xe8, 0x24,
	0x95, 0x85, 0xfb, 0x5b, 0x7f, 0xa3, 0xbe, 0x7d, 0x63, 0x9c, 0xc7, 0xdf, 0x64, 0xd0, 0xf7, 0x50,
	0x4e, 0xef, 0xa9, 0x28, 0xbd, 0x77, 0x6c, 0x59, 0x60, 0x3f, 0xaa, 0xeb, 0x0d, 0x18, 0x38, 0x16,
	0x9e, 0x2f, 0xf7, 0x8c, 0x64, 0xfb, 0x43, 0x8d, 0x94, 0xfc, 0xc6, 0x5a, 0xd9, 0x38, 0xde, 0xca,
	0x25, 0x35, 0xd2, 0xd7, 0x2e, 0x26, 0xbb, 0xd7, 0x3d, 0x17, 0xd7, 0x17, 0xbe, 0xc6, 0xb3, 0x87,
	0xe8, 0x44, 0x9b, 0x0b, 0x07, 0x5b, 0xaa, 0x19, 0xfd, 0x3e, 0x7d, 0x83, 0x07, 0x7b, 0x41, 0xe3,
	0xf9, 0x6f, 0x89, 0xad, 0xac, 0x6c, 0x29, 0xfb, 0x35, 0x2b, 0x0f, 0x37, 0x8d, 0x35, 0x2b, 0x1f,
	0xe9, 0x1e, 0xaf, 0x5f, 0xfc, 0xf9, 0xec, 0xd6, 0x13, 0x93, 0xf9, 0xf5, 0xb9, 0x13, 0xfa, 0x17,
	0x2e, 0x77, 0x22, 0xee, 0x5e, 0xb8, 0x4e, 0x34, 0x0d, 0xdc, 0x0b, 0xb5, 0xc4, 0x5e, 0x2c, 0xf5,
	0x5c, 0xef, 0xaa, 0x7f, 0x07, 0xff, 0xf8, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x47, 0x40,
	0x49, 0x3e, 0x0e, 0x00, 0x00,
}
