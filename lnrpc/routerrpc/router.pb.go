// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routerrpc/router.proto

package routerrpc // import "github.com/decred/dcrlnd/lnrpc/routerrpc"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import lnrpc "github.com/decred/dcrlnd/lnrpc"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Failure_FailureCode int32

const (
	// *
	// The numbers assigned in this enumeration match the failure codes as
	// defined in BOLT #4. Because protobuf 3 requires enums to start with 0,
	// a RESERVED value is added.
	Failure_RESERVED                         Failure_FailureCode = 0
	Failure_UNKNOWN_PAYMENT_HASH             Failure_FailureCode = 1
	Failure_INCORRECT_PAYMENT_AMOUNT         Failure_FailureCode = 2
	Failure_FINAL_INCORRECT_CLTV_EXPIRY      Failure_FailureCode = 3
	Failure_FINAL_INCORRECT_HTLC_AMOUNT      Failure_FailureCode = 4
	Failure_FINAL_EXPIRY_TOO_SOON            Failure_FailureCode = 5
	Failure_INVALID_REALM                    Failure_FailureCode = 6
	Failure_EXPIRY_TOO_SOON                  Failure_FailureCode = 7
	Failure_INVALID_ONION_VERSION            Failure_FailureCode = 8
	Failure_INVALID_ONION_HMAC               Failure_FailureCode = 9
	Failure_INVALID_ONION_KEY                Failure_FailureCode = 10
	Failure_AMOUNT_BELOW_MINIMUM             Failure_FailureCode = 11
	Failure_FEE_INSUFFICIENT                 Failure_FailureCode = 12
	Failure_INCORRECT_CLTV_EXPIRY            Failure_FailureCode = 13
	Failure_CHANNEL_DISABLED                 Failure_FailureCode = 14
	Failure_TEMPORARY_CHANNEL_FAILURE        Failure_FailureCode = 15
	Failure_REQUIRED_NODE_FEATURE_MISSING    Failure_FailureCode = 16
	Failure_REQUIRED_CHANNEL_FEATURE_MISSING Failure_FailureCode = 17
	Failure_UNKNOWN_NEXT_PEER                Failure_FailureCode = 18
	Failure_TEMPORARY_NODE_FAILURE           Failure_FailureCode = 19
	Failure_PERMANENT_NODE_FAILURE           Failure_FailureCode = 20
	Failure_PERMANENT_CHANNEL_FAILURE        Failure_FailureCode = 21
)

var Failure_FailureCode_name = map[int32]string{
	0:  "RESERVED",
	1:  "UNKNOWN_PAYMENT_HASH",
	2:  "INCORRECT_PAYMENT_AMOUNT",
	3:  "FINAL_INCORRECT_CLTV_EXPIRY",
	4:  "FINAL_INCORRECT_HTLC_AMOUNT",
	5:  "FINAL_EXPIRY_TOO_SOON",
	6:  "INVALID_REALM",
	7:  "EXPIRY_TOO_SOON",
	8:  "INVALID_ONION_VERSION",
	9:  "INVALID_ONION_HMAC",
	10: "INVALID_ONION_KEY",
	11: "AMOUNT_BELOW_MINIMUM",
	12: "FEE_INSUFFICIENT",
	13: "INCORRECT_CLTV_EXPIRY",
	14: "CHANNEL_DISABLED",
	15: "TEMPORARY_CHANNEL_FAILURE",
	16: "REQUIRED_NODE_FEATURE_MISSING",
	17: "REQUIRED_CHANNEL_FEATURE_MISSING",
	18: "UNKNOWN_NEXT_PEER",
	19: "TEMPORARY_NODE_FAILURE",
	20: "PERMANENT_NODE_FAILURE",
	21: "PERMANENT_CHANNEL_FAILURE",
}
var Failure_FailureCode_value = map[string]int32{
	"RESERVED":                         0,
	"UNKNOWN_PAYMENT_HASH":             1,
	"INCORRECT_PAYMENT_AMOUNT":         2,
	"FINAL_INCORRECT_CLTV_EXPIRY":      3,
	"FINAL_INCORRECT_HTLC_AMOUNT":      4,
	"FINAL_EXPIRY_TOO_SOON":            5,
	"INVALID_REALM":                    6,
	"EXPIRY_TOO_SOON":                  7,
	"INVALID_ONION_VERSION":            8,
	"INVALID_ONION_HMAC":               9,
	"INVALID_ONION_KEY":                10,
	"AMOUNT_BELOW_MINIMUM":             11,
	"FEE_INSUFFICIENT":                 12,
	"INCORRECT_CLTV_EXPIRY":            13,
	"CHANNEL_DISABLED":                 14,
	"TEMPORARY_CHANNEL_FAILURE":        15,
	"REQUIRED_NODE_FEATURE_MISSING":    16,
	"REQUIRED_CHANNEL_FEATURE_MISSING": 17,
	"UNKNOWN_NEXT_PEER":                18,
	"TEMPORARY_NODE_FAILURE":           19,
	"PERMANENT_NODE_FAILURE":           20,
	"PERMANENT_CHANNEL_FAILURE":        21,
}

func (x Failure_FailureCode) String() string {
	return proto.EnumName(Failure_FailureCode_name, int32(x))
}
func (Failure_FailureCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{6, 0}
}

type PaymentRequest struct {
	// *
	// A serialized BOLT-11 payment request that contains all information
	// required to dispatch the payment. If the pay req is invalid, or expired,
	// an error will be returned.
	PayReq string `protobuf:"bytes,1,opt,name=pay_req,json=payReq,proto3" json:"pay_req,omitempty"`
	// *
	// An absolute limit on the highest fee we should pay when looking for a route
	// to the destination. Routes with fees higher than this will be ignored, if
	// there are no routes with a fee below this amount, an error will be
	// returned.
	FeeLimitAtoms int64 `protobuf:"varint,2,opt,name=fee_limit_atoms,json=feeLimitAtoms,proto3" json:"fee_limit_atoms,omitempty"`
	// *
	// An absolute limit on the cumulative CLTV value along the route for this
	// payment. Routes with total CLTV values higher than this will be ignored,
	// if there are no routes with a CLTV value below this amount, an error will
	// be returned.
	CltvLimit int32 `protobuf:"varint,3,opt,name=cltv_limit,json=cltvLimit,proto3" json:"cltv_limit,omitempty"`
	// *
	// An upper limit on the amount of time we should spend when attempting to
	// fulfill the payment. This is expressed in seconds. If we cannot make a
	// successful payment within this time frame, an error will be returned.
	TimeoutSeconds int32 `protobuf:"varint,4,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// *
	// The channel id of the channel that must be taken to the first hop. If zero,
	// any channel may be used.
	OutgoingChannelId    int64    `protobuf:"varint,5,opt,name=outgoing_channel_id,json=outgoingChannelId,proto3" json:"outgoing_channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentRequest) Reset()         { *m = PaymentRequest{} }
func (m *PaymentRequest) String() string { return proto.CompactTextString(m) }
func (*PaymentRequest) ProtoMessage()    {}
func (*PaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{0}
}
func (m *PaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentRequest.Unmarshal(m, b)
}
func (m *PaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentRequest.Marshal(b, m, deterministic)
}
func (dst *PaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentRequest.Merge(dst, src)
}
func (m *PaymentRequest) XXX_Size() int {
	return xxx_messageInfo_PaymentRequest.Size(m)
}
func (m *PaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentRequest proto.InternalMessageInfo

func (m *PaymentRequest) GetPayReq() string {
	if m != nil {
		return m.PayReq
	}
	return ""
}

func (m *PaymentRequest) GetFeeLimitAtoms() int64 {
	if m != nil {
		return m.FeeLimitAtoms
	}
	return 0
}

func (m *PaymentRequest) GetCltvLimit() int32 {
	if m != nil {
		return m.CltvLimit
	}
	return 0
}

func (m *PaymentRequest) GetTimeoutSeconds() int32 {
	if m != nil {
		return m.TimeoutSeconds
	}
	return 0
}

func (m *PaymentRequest) GetOutgoingChannelId() int64 {
	if m != nil {
		return m.OutgoingChannelId
	}
	return 0
}

type PaymentResponse struct {
	// *
	// The payment hash that we paid to. Provided so callers are able to map
	// responses (which may be streaming) back to their original requests.
	PayHash []byte `protobuf:"bytes,1,opt,name=pay_hash,json=payHash,proto3" json:"pay_hash,omitempty"`
	// *
	// The pre-image of the payment successfully completed.
	PreImage []byte `protobuf:"bytes,2,opt,name=pre_image,json=preImage,proto3" json:"pre_image,omitempty"`
	// *
	// If not an empty string, then a string representation of the payment error.
	PaymentErr           string   `protobuf:"bytes,3,opt,name=payment_err,json=paymentErr,proto3" json:"payment_err,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentResponse) Reset()         { *m = PaymentResponse{} }
func (m *PaymentResponse) String() string { return proto.CompactTextString(m) }
func (*PaymentResponse) ProtoMessage()    {}
func (*PaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{1}
}
func (m *PaymentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentResponse.Unmarshal(m, b)
}
func (m *PaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentResponse.Marshal(b, m, deterministic)
}
func (dst *PaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentResponse.Merge(dst, src)
}
func (m *PaymentResponse) XXX_Size() int {
	return xxx_messageInfo_PaymentResponse.Size(m)
}
func (m *PaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentResponse proto.InternalMessageInfo

func (m *PaymentResponse) GetPayHash() []byte {
	if m != nil {
		return m.PayHash
	}
	return nil
}

func (m *PaymentResponse) GetPreImage() []byte {
	if m != nil {
		return m.PreImage
	}
	return nil
}

func (m *PaymentResponse) GetPaymentErr() string {
	if m != nil {
		return m.PaymentErr
	}
	return ""
}

type RouteFeeRequest struct {
	// *
	// The destination once wishes to obtain a routing fee quote to.
	Dest []byte `protobuf:"bytes,1,opt,name=dest,proto3" json:"dest,omitempty"`
	// *
	// The amount one wishes to send to the target destination.
	AmtAtoms             int64    `protobuf:"varint,2,opt,name=amt_atoms,json=amtAtoms,proto3" json:"amt_atoms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeRequest) Reset()         { *m = RouteFeeRequest{} }
func (m *RouteFeeRequest) String() string { return proto.CompactTextString(m) }
func (*RouteFeeRequest) ProtoMessage()    {}
func (*RouteFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{2}
}
func (m *RouteFeeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeRequest.Unmarshal(m, b)
}
func (m *RouteFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeRequest.Marshal(b, m, deterministic)
}
func (dst *RouteFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeRequest.Merge(dst, src)
}
func (m *RouteFeeRequest) XXX_Size() int {
	return xxx_messageInfo_RouteFeeRequest.Size(m)
}
func (m *RouteFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeRequest proto.InternalMessageInfo

func (m *RouteFeeRequest) GetDest() []byte {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (m *RouteFeeRequest) GetAmtAtoms() int64 {
	if m != nil {
		return m.AmtAtoms
	}
	return 0
}

type RouteFeeResponse struct {
	// *
	// A lower bound of the estimated fee to the target destination within the
	// network, expressed in milli-satoshis.
	RoutingFeeMatoms int64 `protobuf:"varint,1,opt,name=routing_fee_matoms,json=routingFeeMatoms,proto3" json:"routing_fee_matoms,omitempty"`
	// *
	// An estimate of the worst case time delay that can occur. Note that callers
	// will still need to factor in the final CLTV delta of the last hop into this
	// value.
	TimeLockDelay        int64    `protobuf:"varint,2,opt,name=time_lock_delay,json=timeLockDelay,proto3" json:"time_lock_delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteFeeResponse) Reset()         { *m = RouteFeeResponse{} }
func (m *RouteFeeResponse) String() string { return proto.CompactTextString(m) }
func (*RouteFeeResponse) ProtoMessage()    {}
func (*RouteFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{3}
}
func (m *RouteFeeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteFeeResponse.Unmarshal(m, b)
}
func (m *RouteFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteFeeResponse.Marshal(b, m, deterministic)
}
func (dst *RouteFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteFeeResponse.Merge(dst, src)
}
func (m *RouteFeeResponse) XXX_Size() int {
	return xxx_messageInfo_RouteFeeResponse.Size(m)
}
func (m *RouteFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RouteFeeResponse proto.InternalMessageInfo

func (m *RouteFeeResponse) GetRoutingFeeMatoms() int64 {
	if m != nil {
		return m.RoutingFeeMatoms
	}
	return 0
}

func (m *RouteFeeResponse) GetTimeLockDelay() int64 {
	if m != nil {
		return m.TimeLockDelay
	}
	return 0
}

type SendToRouteRequest struct {
	// / The payment hash to use for the HTLC.
	PaymentHash []byte `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	// / Route that should be used to attempt to complete the payment.
	Route                *lnrpc.Route `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SendToRouteRequest) Reset()         { *m = SendToRouteRequest{} }
func (m *SendToRouteRequest) String() string { return proto.CompactTextString(m) }
func (*SendToRouteRequest) ProtoMessage()    {}
func (*SendToRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{4}
}
func (m *SendToRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteRequest.Unmarshal(m, b)
}
func (m *SendToRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteRequest.Marshal(b, m, deterministic)
}
func (dst *SendToRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteRequest.Merge(dst, src)
}
func (m *SendToRouteRequest) XXX_Size() int {
	return xxx_messageInfo_SendToRouteRequest.Size(m)
}
func (m *SendToRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteRequest proto.InternalMessageInfo

func (m *SendToRouteRequest) GetPaymentHash() []byte {
	if m != nil {
		return m.PaymentHash
	}
	return nil
}

func (m *SendToRouteRequest) GetRoute() *lnrpc.Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type SendToRouteResponse struct {
	// / The preimage obtained by making the payment.
	Preimage []byte `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	// / The failure message in case the payment failed.
	Failure              *Failure `protobuf:"bytes,2,opt,name=failure,proto3" json:"failure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendToRouteResponse) Reset()         { *m = SendToRouteResponse{} }
func (m *SendToRouteResponse) String() string { return proto.CompactTextString(m) }
func (*SendToRouteResponse) ProtoMessage()    {}
func (*SendToRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{5}
}
func (m *SendToRouteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendToRouteResponse.Unmarshal(m, b)
}
func (m *SendToRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendToRouteResponse.Marshal(b, m, deterministic)
}
func (dst *SendToRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendToRouteResponse.Merge(dst, src)
}
func (m *SendToRouteResponse) XXX_Size() int {
	return xxx_messageInfo_SendToRouteResponse.Size(m)
}
func (m *SendToRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendToRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendToRouteResponse proto.InternalMessageInfo

func (m *SendToRouteResponse) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *SendToRouteResponse) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type Failure struct {
	// / Failure code as defined in the Lightning spec
	Code Failure_FailureCode `protobuf:"varint,1,opt,name=code,proto3,enum=routerrpc.Failure_FailureCode" json:"code,omitempty"`
	// *
	// The node pubkey of the intermediate or final node that generated the failure
	// message.
	FailureSourcePubkey []byte `protobuf:"bytes,2,opt,name=failure_source_pubkey,json=failureSourcePubkey,proto3" json:"failure_source_pubkey,omitempty"`
	// / An optional channel update message.
	ChannelUpdate *ChannelUpdate `protobuf:"bytes,3,opt,name=channel_update,json=channelUpdate,proto3" json:"channel_update,omitempty"`
	// / A failure type-dependent htlc value.
	HtlcMAtoms uint64 `protobuf:"varint,4,opt,name=htlc_m_atoms,json=htlcMAtoms,proto3" json:"htlc_m_atoms,omitempty"`
	// / The sha256 sum of the onion payload.
	OnionSha_256 []byte `protobuf:"bytes,5,opt,name=onion_sha_256,json=onionSha256,proto3" json:"onion_sha_256,omitempty"`
	// / A failure type-dependent cltv expiry value.
	CltvExpiry uint32 `protobuf:"varint,6,opt,name=cltv_expiry,json=cltvExpiry,proto3" json:"cltv_expiry,omitempty"`
	// / A failure type-dependent flags value.
	Flags                uint32   `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{6}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Failure.Unmarshal(m, b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
}
func (dst *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(dst, src)
}
func (m *Failure) XXX_Size() int {
	return xxx_messageInfo_Failure.Size(m)
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetCode() Failure_FailureCode {
	if m != nil {
		return m.Code
	}
	return Failure_RESERVED
}

func (m *Failure) GetFailureSourcePubkey() []byte {
	if m != nil {
		return m.FailureSourcePubkey
	}
	return nil
}

func (m *Failure) GetChannelUpdate() *ChannelUpdate {
	if m != nil {
		return m.ChannelUpdate
	}
	return nil
}

func (m *Failure) GetHtlcMAtoms() uint64 {
	if m != nil {
		return m.HtlcMAtoms
	}
	return 0
}

func (m *Failure) GetOnionSha_256() []byte {
	if m != nil {
		return m.OnionSha_256
	}
	return nil
}

func (m *Failure) GetCltvExpiry() uint32 {
	if m != nil {
		return m.CltvExpiry
	}
	return 0
}

func (m *Failure) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type ChannelUpdate struct {
	// *
	// The signature that validates the announced data and proves the ownership
	// of node id.
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// *
	// The target chain that this channel was opened within. This value
	// should be the genesis hash of the target chain. Along with the short
	// channel ID, this uniquely identifies the channel globally in a
	// blockchain.
	ChainHash []byte `protobuf:"bytes,2,opt,name=chain_hash,json=chainHash,proto3" json:"chain_hash,omitempty"`
	// *
	// The unique description of the funding transaction.
	ChanId uint64 `protobuf:"varint,3,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	// *
	// A timestamp that allows ordering in the case of multiple announcements.
	// We should ignore the message if timestamp is not greater than the
	// last-received.
	Timestamp uint32 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// *
	// The bitfield that describes additional meta-data concerning how the
	// update is to be interpreted. Currently, the least-significant bit must be
	// set to 0 if the creating node corresponds to the first node in the
	// previously sent channel announcement and 1 otherwise. If the second bit
	// is set, then the channel is set to be disabled.
	ChannelFlags uint32 `protobuf:"varint,5,opt,name=channel_flags,json=channelFlags,proto3" json:"channel_flags,omitempty"`
	// *
	// The minimum number of blocks this node requires to be added to the expiry
	// of HTLCs. This is a security parameter determined by the node operator.
	// This value represents the required gap between the time locks of the
	// incoming and outgoing HTLC's set to this node.
	TimeLockDelta uint32 `protobuf:"varint,6,opt,name=time_lock_delta,json=timeLockDelta,proto3" json:"time_lock_delta,omitempty"`
	// *
	// The minimum HTLC value which will be accepted.
	HtlcMinimumMAtoms uint64 `protobuf:"varint,7,opt,name=htlc_minimum_m_atoms,json=htlcMinimumMAtoms,proto3" json:"htlc_minimum_m_atoms,omitempty"`
	// *
	// The base fee that must be used for incoming HTLC's to this particular
	// channel. This value will be tacked onto the required for a payment
	// independent of the size of the payment.
	BaseFee uint32 `protobuf:"varint,8,opt,name=base_fee,json=baseFee,proto3" json:"base_fee,omitempty"`
	// *
	// The fee rate that will be charged per millionth of a satoshi.
	FeeRate              uint32   `protobuf:"varint,9,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelUpdate) Reset()         { *m = ChannelUpdate{} }
func (m *ChannelUpdate) String() string { return proto.CompactTextString(m) }
func (*ChannelUpdate) ProtoMessage()    {}
func (*ChannelUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_5981f51b43d6cc84, []int{7}
}
func (m *ChannelUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelUpdate.Unmarshal(m, b)
}
func (m *ChannelUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelUpdate.Marshal(b, m, deterministic)
}
func (dst *ChannelUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelUpdate.Merge(dst, src)
}
func (m *ChannelUpdate) XXX_Size() int {
	return xxx_messageInfo_ChannelUpdate.Size(m)
}
func (m *ChannelUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelUpdate proto.InternalMessageInfo

func (m *ChannelUpdate) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ChannelUpdate) GetChainHash() []byte {
	if m != nil {
		return m.ChainHash
	}
	return nil
}

func (m *ChannelUpdate) GetChanId() uint64 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *ChannelUpdate) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ChannelUpdate) GetChannelFlags() uint32 {
	if m != nil {
		return m.ChannelFlags
	}
	return 0
}

func (m *ChannelUpdate) GetTimeLockDelta() uint32 {
	if m != nil {
		return m.TimeLockDelta
	}
	return 0
}

func (m *ChannelUpdate) GetHtlcMinimumMAtoms() uint64 {
	if m != nil {
		return m.HtlcMinimumMAtoms
	}
	return 0
}

func (m *ChannelUpdate) GetBaseFee() uint32 {
	if m != nil {
		return m.BaseFee
	}
	return 0
}

func (m *ChannelUpdate) GetFeeRate() uint32 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

func init() {
	proto.RegisterType((*PaymentRequest)(nil), "routerrpc.PaymentRequest")
	proto.RegisterType((*PaymentResponse)(nil), "routerrpc.PaymentResponse")
	proto.RegisterType((*RouteFeeRequest)(nil), "routerrpc.RouteFeeRequest")
	proto.RegisterType((*RouteFeeResponse)(nil), "routerrpc.RouteFeeResponse")
	proto.RegisterType((*SendToRouteRequest)(nil), "routerrpc.SendToRouteRequest")
	proto.RegisterType((*SendToRouteResponse)(nil), "routerrpc.SendToRouteResponse")
	proto.RegisterType((*Failure)(nil), "routerrpc.Failure")
	proto.RegisterType((*ChannelUpdate)(nil), "routerrpc.ChannelUpdate")
	proto.RegisterEnum("routerrpc.Failure_FailureCode", Failure_FailureCode_name, Failure_FailureCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	// *
	// SendPayment attempts to route a payment described by the passed
	// PaymentRequest to the final destination. If we are unable to route the
	// payment, or cannot find a route that satisfies the constraints in the
	// PaymentRequest, then an error will be returned. Otherwise, the payment
	// pre-image, along with the final route will be returned.
	SendPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// *
	// EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	// may cost to send an HTLC to the target end destination.
	EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error)
	// *
	// SendToRoute attempts to make a payment via the specified route. This method
	// differs from SendPayment in that it allows users to specify a full route
	// manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) SendPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/SendPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) EstimateRouteFee(ctx context.Context, in *RouteFeeRequest, opts ...grpc.CallOption) (*RouteFeeResponse, error) {
	out := new(RouteFeeResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/EstimateRouteFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) SendToRoute(ctx context.Context, in *SendToRouteRequest, opts ...grpc.CallOption) (*SendToRouteResponse, error) {
	out := new(SendToRouteResponse)
	err := c.cc.Invoke(ctx, "/routerrpc.Router/SendToRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	// *
	// SendPayment attempts to route a payment described by the passed
	// PaymentRequest to the final destination. If we are unable to route the
	// payment, or cannot find a route that satisfies the constraints in the
	// PaymentRequest, then an error will be returned. Otherwise, the payment
	// pre-image, along with the final route will be returned.
	SendPayment(context.Context, *PaymentRequest) (*PaymentResponse, error)
	// *
	// EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
	// may cost to send an HTLC to the target end destination.
	EstimateRouteFee(context.Context, *RouteFeeRequest) (*RouteFeeResponse, error)
	// *
	// SendToRoute attempts to make a payment via the specified route. This method
	// differs from SendPayment in that it allows users to specify a full route
	// manually. This can be used for things like rebalancing, and atomic swaps.
	SendToRoute(context.Context, *SendToRouteRequest) (*SendToRouteResponse, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SendPayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_EstimateRouteFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).EstimateRouteFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/EstimateRouteFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).EstimateRouteFee(ctx, req.(*RouteFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_SendToRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).SendToRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routerrpc.Router/SendToRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).SendToRoute(ctx, req.(*SendToRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routerrpc.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPayment",
			Handler:    _Router_SendPayment_Handler,
		},
		{
			MethodName: "EstimateRouteFee",
			Handler:    _Router_EstimateRouteFee_Handler,
		},
		{
			MethodName: "SendToRoute",
			Handler:    _Router_SendToRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routerrpc/router.proto",
}

func init() { proto.RegisterFile("routerrpc/router.proto", fileDescriptor_router_5981f51b43d6cc84) }

var fileDescriptor_router_5981f51b43d6cc84 = []byte{
	// 1168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x56, 0xeb, 0x72, 0xda, 0x46,
	0x14, 0x2e, 0xf1, 0x05, 0x38, 0x80, 0x2d, 0xaf, 0xed, 0x04, 0x93, 0x38, 0x71, 0x68, 0xa7, 0xf5,
	0x74, 0x32, 0x66, 0x86, 0x4e, 0xf2, 0xb7, 0x23, 0xc3, 0x52, 0x34, 0xd1, 0x85, 0xae, 0xc0, 0x89,
	0xdb, 0x1f, 0x3b, 0xb2, 0xb4, 0x06, 0x35, 0xe8, 0x12, 0x49, 0x74, 0xca, 0x33, 0xf4, 0x81, 0xfa,
	0x0c, 0x7d, 0x84, 0x3e, 0x42, 0xdf, 0xa2, 0xb3, 0xbb, 0x12, 0x17, 0xc7, 0xfd, 0x85, 0xf6, 0xfb,
	0xce, 0x9e, 0xb3, 0xe7, 0xec, 0x39, 0xdf, 0x02, 0x4f, 0x93, 0x68, 0x91, 0xb1, 0x24, 0x89, 0xdd,
	0x8e, 0xfc, 0xba, 0x8a, 0x93, 0x28, 0x8b, 0x50, 0x75, 0x85, 0xb7, 0xaa, 0x49, 0xec, 0x4a, 0xb4,
	0xfd, 0x77, 0x09, 0x0e, 0x46, 0xce, 0x32, 0x60, 0x61, 0x46, 0xd8, 0xe7, 0x05, 0x4b, 0x33, 0xf4,
	0x0c, 0xca, 0xb1, 0xb3, 0xa4, 0x09, 0xfb, 0xdc, 0x2c, 0x5d, 0x94, 0x2e, 0xab, 0x64, 0x3f, 0x76,
	0x96, 0x84, 0x7d, 0x46, 0xdf, 0xc2, 0xe1, 0x3d, 0x63, 0x74, 0xee, 0x07, 0x7e, 0x46, 0x9d, 0x2c,
	0x0a, 0xd2, 0xe6, 0x93, 0x8b, 0xd2, 0xe5, 0x0e, 0x69, 0xdc, 0x33, 0xa6, 0x73, 0x54, 0xe5, 0x20,
	0x3a, 0x07, 0x70, 0xe7, 0xd9, 0xef, 0xd2, 0xb0, 0xb9, 0x73, 0x51, 0xba, 0xdc, 0x23, 0x55, 0x8e,
	0x08, 0x1b, 0xf4, 0x1d, 0x1c, 0x66, 0x7e, 0xc0, 0xa2, 0x45, 0x46, 0x53, 0xe6, 0x46, 0xa1, 0x97,
	0x36, 0x77, 0x85, 0xcd, 0x41, 0x0e, 0xdb, 0x12, 0x45, 0x57, 0x70, 0x1c, 0x2d, 0xb2, 0x69, 0xe4,
	0x87, 0x53, 0xea, 0xce, 0x9c, 0x30, 0x64, 0x73, 0xea, 0x7b, 0xcd, 0x3d, 0x11, 0xf3, 0xa8, 0xa0,
	0x7a, 0x92, 0xd1, 0xbc, 0xf6, 0x6f, 0x70, 0xb8, 0x4a, 0x25, 0x8d, 0xa3, 0x30, 0x65, 0xe8, 0x0c,
	0x2a, 0x3c, 0x97, 0x99, 0x93, 0xce, 0x44, 0x32, 0x75, 0xc2, 0x73, 0x1b, 0x3a, 0xe9, 0x0c, 0x3d,
	0x87, 0x6a, 0x9c, 0x30, 0xea, 0x07, 0xce, 0x94, 0x89, 0x3c, 0xea, 0xa4, 0x12, 0x27, 0x4c, 0xe3,
	0x6b, 0xf4, 0x0a, 0x6a, 0xb1, 0x74, 0x45, 0x59, 0x92, 0x88, 0x1c, 0xaa, 0x04, 0x72, 0x08, 0x27,
	0x49, 0xfb, 0x1a, 0x0e, 0x09, 0xaf, 0xe7, 0x80, 0xb1, 0xa2, 0x6e, 0x08, 0x76, 0x3d, 0x96, 0x66,
	0x79, 0x1c, 0xf1, 0xcd, 0x83, 0x38, 0xc1, 0x76, 0xb1, 0x2a, 0x4e, 0x20, 0xeb, 0xd4, 0x9e, 0x81,
	0xb2, 0xf6, 0x91, 0x1f, 0xf8, 0x0d, 0x20, 0x7e, 0x4f, 0x3c, 0x65, 0x5e, 0xeb, 0x40, 0xee, 0x2c,
	0x89, 0x9d, 0x4a, 0xce, 0x0c, 0x18, 0x33, 0x04, 0xce, 0x6f, 0x84, 0xd7, 0x8c, 0xce, 0x23, 0xf7,
	0x13, 0xf5, 0xd8, 0xdc, 0x59, 0x16, 0x37, 0xc2, 0x61, 0x3d, 0x72, 0x3f, 0xf5, 0x39, 0xd8, 0xfe,
	0x15, 0x90, 0xcd, 0x42, 0x6f, 0x1c, 0x89, 0x78, 0xc5, 0x81, 0x5f, 0x43, 0xbd, 0x48, 0x72, 0xa3,
	0x40, 0x45, 0xe2, 0xa2, 0x48, 0x6d, 0xd8, 0x13, 0x6d, 0x23, 0xdc, 0xd6, 0xba, 0xf5, 0xab, 0x79,
	0xc8, 0x7b, 0x47, 0xba, 0x91, 0x54, 0x9b, 0xc2, 0xf1, 0x96, 0xf3, 0x3c, 0x93, 0x16, 0xf0, 0x72,
	0xca, 0xf2, 0x96, 0x56, 0xe5, 0x15, 0x6b, 0xf4, 0x06, 0xca, 0xf7, 0x8e, 0x3f, 0x5f, 0x24, 0x85,
	0x63, 0x74, 0xb5, 0xea, 0xce, 0xab, 0x81, 0x64, 0x48, 0x61, 0xd2, 0xfe, 0xb3, 0x0c, 0xe5, 0x1c,
	0x44, 0x5d, 0xd8, 0x75, 0x23, 0x4f, 0x7a, 0x3c, 0xe8, 0xbe, 0xfc, 0x72, 0x5b, 0xf1, 0xdb, 0x8b,
	0x3c, 0x46, 0x84, 0x2d, 0xea, 0xc2, 0x69, 0xee, 0x8a, 0xa6, 0xd1, 0x22, 0x71, 0x19, 0x8d, 0x17,
	0x77, 0x9f, 0xd8, 0x32, 0xbf, 0xf5, 0xe3, 0x9c, 0xb4, 0x05, 0x37, 0x12, 0x14, 0xfa, 0x11, 0x0e,
	0x8a, 0x96, 0x5b, 0xc4, 0x9e, 0x93, 0x31, 0xd1, 0x03, 0xb5, 0x6e, 0x73, 0x23, 0x62, 0xde, 0x79,
	0x13, 0xc1, 0x93, 0x86, 0xbb, 0xb9, 0x44, 0x17, 0x50, 0x9f, 0x65, 0x73, 0x97, 0x06, 0xf9, 0xe5,
	0xf3, 0x16, 0xdf, 0x25, 0xc0, 0x31, 0x43, 0x8e, 0x49, 0x1b, 0x1a, 0x51, 0xe8, 0x47, 0x21, 0x4d,
	0x67, 0x0e, 0xed, 0xbe, 0x7d, 0x27, 0x1a, 0xbb, 0x4e, 0x6a, 0x02, 0xb4, 0x67, 0x4e, 0xf7, 0xed,
	0x3b, 0xde, 0x87, 0x62, 0x94, 0xd8, 0x1f, 0xb1, 0x9f, 0x2c, 0x9b, 0xfb, 0x17, 0xa5, 0xcb, 0x06,
	0x11, 0xd3, 0x85, 0x05, 0x82, 0x4e, 0x60, 0xef, 0x7e, 0xee, 0x4c, 0xd3, 0x66, 0x59, 0x50, 0x72,
	0xd1, 0xfe, 0x67, 0x17, 0x6a, 0x1b, 0x75, 0x40, 0x75, 0xa8, 0x10, 0x6c, 0x63, 0x72, 0x83, 0xfb,
	0xca, 0x57, 0xa8, 0x09, 0x27, 0x13, 0xf3, 0xbd, 0x69, 0x7d, 0x30, 0xe9, 0x48, 0xbd, 0x35, 0xb0,
	0x39, 0xa6, 0x43, 0xd5, 0x1e, 0x2a, 0x25, 0xf4, 0x02, 0x9a, 0x9a, 0xd9, 0xb3, 0x08, 0xc1, 0xbd,
	0xf1, 0x8a, 0x53, 0x0d, 0x6b, 0x62, 0x8e, 0x95, 0x27, 0xe8, 0x15, 0x3c, 0x1f, 0x68, 0xa6, 0xaa,
	0xd3, 0xb5, 0x4d, 0x4f, 0x1f, 0xdf, 0x50, 0xfc, 0x71, 0xa4, 0x91, 0x5b, 0x65, 0xe7, 0x31, 0x83,
	0xe1, 0x58, 0xef, 0x15, 0x1e, 0x76, 0xd1, 0x19, 0x9c, 0x4a, 0x03, 0xb9, 0x85, 0x8e, 0x2d, 0x8b,
	0xda, 0x96, 0x65, 0x2a, 0x7b, 0xe8, 0x08, 0x1a, 0x9a, 0x79, 0xa3, 0xea, 0x5a, 0x9f, 0x12, 0xac,
	0xea, 0x86, 0xb2, 0x8f, 0x8e, 0xe1, 0xf0, 0xa1, 0x5d, 0x99, 0xbb, 0x28, 0xec, 0x2c, 0x53, 0xb3,
	0x4c, 0x7a, 0x83, 0x89, 0xad, 0x59, 0xa6, 0x52, 0x41, 0x4f, 0x01, 0x6d, 0x53, 0x43, 0x43, 0xed,
	0x29, 0x55, 0x74, 0x0a, 0x47, 0xdb, 0xf8, 0x7b, 0x7c, 0xab, 0x00, 0x2f, 0x83, 0x3c, 0x18, 0xbd,
	0xc6, 0xba, 0xf5, 0x81, 0x1a, 0x9a, 0xa9, 0x19, 0x13, 0x43, 0xa9, 0xa1, 0x13, 0x50, 0x06, 0x18,
	0x53, 0xcd, 0xb4, 0x27, 0x83, 0x81, 0xd6, 0xd3, 0xb0, 0x39, 0x56, 0xea, 0x32, 0xf2, 0x63, 0x89,
	0x37, 0xf8, 0x86, 0xde, 0x50, 0x35, 0x4d, 0xac, 0xd3, 0xbe, 0x66, 0xab, 0xd7, 0x3a, 0xee, 0x2b,
	0x07, 0xe8, 0x1c, 0xce, 0xc6, 0xd8, 0x18, 0x59, 0x44, 0x25, 0xb7, 0xb4, 0xe0, 0x07, 0xaa, 0xa6,
	0x4f, 0x08, 0x56, 0x0e, 0xd1, 0x6b, 0x38, 0x27, 0xf8, 0xe7, 0x89, 0x46, 0x70, 0x9f, 0x9a, 0x56,
	0x1f, 0xd3, 0x01, 0x56, 0xc7, 0x13, 0x82, 0xa9, 0xa1, 0xd9, 0xb6, 0x66, 0xfe, 0xa4, 0x28, 0xe8,
	0x1b, 0xb8, 0x58, 0x99, 0xac, 0x1c, 0x3c, 0xb0, 0x3a, 0xe2, 0xf9, 0x15, 0xf7, 0x69, 0xe2, 0x8f,
	0x63, 0x3a, 0xc2, 0x98, 0x28, 0x08, 0xb5, 0xe0, 0xe9, 0x3a, 0xbc, 0x0c, 0x90, 0xc7, 0x3e, 0xe6,
	0xdc, 0x08, 0x13, 0x43, 0x35, 0xf9, 0x05, 0x6f, 0x71, 0x27, 0xfc, 0xd8, 0x6b, 0xee, 0xe1, 0xb1,
	0x4f, 0xdb, 0x7f, 0x3d, 0x81, 0xc6, 0x56, 0xe7, 0xa3, 0x17, 0x50, 0x4d, 0xfd, 0x69, 0xe8, 0x64,
	0x7c, 0x9e, 0xe5, 0xa8, 0xaf, 0x01, 0xf1, 0x1a, 0xcc, 0x1c, 0x3f, 0x94, 0x1a, 0x23, 0x47, 0xae,
	0x2a, 0x10, 0xa1, 0x30, 0xcf, 0xa0, 0xcc, 0x07, 0x87, 0x0b, 0xfb, 0x8e, 0x18, 0x91, 0x7d, 0xbe,
	0xd4, 0x3c, 0xee, 0x95, 0x8b, 0x58, 0x9a, 0x39, 0x41, 0x2c, 0xa6, 0xa7, 0x41, 0xd6, 0x00, 0xfa,
	0x1a, 0x8a, 0x79, 0xa3, 0xb2, 0xff, 0xf7, 0x84, 0x45, 0x3d, 0x07, 0x07, 0x1c, 0xfb, 0x42, 0x1e,
	0x33, 0x27, 0x9f, 0xa0, 0x4d, 0x79, 0xcc, 0x1c, 0xd4, 0x81, 0x13, 0x39, 0xab, 0x7e, 0xe8, 0x07,
	0x8b, 0x60, 0x35, 0xb3, 0x65, 0x71, 0xa0, 0x23, 0x31, 0xb3, 0x92, 0xca, 0x47, 0xf7, 0x0c, 0x2a,
	0x77, 0x4e, 0xca, 0xb8, 0x44, 0x37, 0x2b, 0xc2, 0x63, 0x99, 0xaf, 0x07, 0x4c, 0xbc, 0x38, 0x5c,
	0xb8, 0x13, 0x2e, 0x19, 0x55, 0x49, 0xdd, 0x33, 0x46, 0x9c, 0x8c, 0x75, 0xff, 0x2d, 0xc1, 0xbe,
	0xd0, 0xc8, 0x04, 0xf5, 0xa1, 0xc6, 0x35, 0x33, 0x7f, 0xae, 0xd0, 0xd9, 0x86, 0xaa, 0x6c, 0xbf,
	0xc6, 0xad, 0xd6, 0x63, 0x54, 0x2e, 0xb1, 0xef, 0x41, 0xc1, 0x69, 0xe6, 0x07, 0x5c, 0x7e, 0xf2,
	0x87, 0x04, 0x6d, 0xda, 0x3f, 0x78, 0xa1, 0x5a, 0xcf, 0x1f, 0xe5, 0x72, 0x67, 0xba, 0x3c, 0x52,
	0x2e, 0xe3, 0xe8, 0x7c, 0xc3, 0xf6, 0xcb, 0xb7, 0xa3, 0xf5, 0xf2, 0xff, 0x68, 0xe9, 0xed, 0xfa,
	0xfb, 0x5f, 0x2e, 0xa7, 0x7e, 0x36, 0x5b, 0xdc, 0x5d, 0xb9, 0x51, 0xd0, 0xf1, 0x98, 0x9b, 0x30,
	0xaf, 0xe3, 0xb9, 0xc9, 0x3c, 0xf4, 0x3a, 0xe2, 0x0d, 0xe9, 0xac, 0xf6, 0xdf, 0xed, 0x8b, 0xbf,
	0x22, 0x3f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x4e, 0xb6, 0x79, 0xba, 0x08, 0x00, 0x00,
}
